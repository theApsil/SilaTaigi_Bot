from config import ADMIN_ID, BOT_TOKEN, msg
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import random
from db import init_db, update_user_bonus, get_user_bonus, reset_user_bonus, add_user, get_all_users

CHAT_DATA = {}


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
def generate_code():
    return random.randint(1000, 9999)


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat_id
    add_user(user_id)
    print(f"log: starting for USER [{user_id}]")
    keyboard = [
        [KeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —É—Å–ª—É–≥–∏")],
        [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–Ω—É—Å—ã")],
        [KeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ–¥–∞—Ä–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)

    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ—Ä–æ–≥–∏–µ –≥–æ—Å—Ç–∏! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç –≤–∞—à–µ–π –ª—é–±–∏–º–æ–π ¬´–°–∏–ª—ã –¢–∞–π–≥–∏¬ªüíö\n"
        "–ó–∞ –ø–æ–º–æ—â—å—é –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ!",
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —É—Å–ª—É–≥–∏ - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏\n"
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–Ω—É—Å—ã - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤\n"
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞"
    )
    await update.message.reply_text(help_text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    if text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —É—Å–ª—É–≥–∏":
        await generate_service_code(update, context)
    elif text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–Ω—É—Å—ã":
        await check_bonuses(update, context)
    elif text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ–¥–∞—Ä–∫–∞":
        await generate_gift_code(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —É—Å–ª—É–≥–∏"
async def generate_service_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat_id
    code = generate_code()
    CHAT_DATA[code] = {'user_id': user_id, 'action': 'service'}
    print(f"log: generate service code for USER [{CHAT_DATA[code]['user_id']}")
    await update.message.reply_text(f"–í–∞—à –∫–æ–¥ —É—Å–ª—É–≥–∏: {code}")
    for item in ADMIN_ID:
        await context.bot.send_message(chat_id=item, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥ —É—Å–ª—É–≥–∏: {code}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def confirm_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id not in ADMIN_ID:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∫–æ–¥—ã.")
        return

    try:
        code = int(update.message.text.split()[1])
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /confirm <code>")
        return
    print(f"log: confirming from ADMIN [{update.message.chat_id}]\n"
          f"for USER [{CHAT_DATA[code]['user_id']}] CODE [{code}]")
    if code in CHAT_DATA and CHAT_DATA[code]['action'] == 'service':
        user_id = CHAT_DATA[code]['user_id']
        bonus_count = update_user_bonus(user_id)
        await context.bot.send_message(chat_id=user_id, text=f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å {bonus_count} / 8")
        for admin_id in ADMIN_ID:
            await context.bot.send_message(chat_id=admin_id, text="–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

        del CHAT_DATA[code]


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–æ–≤
async def check_bonuses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat_id
    bonus_count = get_user_bonus(user_id)
    print(f"log: check bonus USER [{user_id}]")

    await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –±–æ–Ω—É—Å–æ–≤: {bonus_count} / 8")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞
async def generate_gift_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat_id
    bonus_count = get_user_bonus(user_id)

    if bonus_count < 8:
        await update.message.reply_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤. \n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∫–æ–ø–∏—Ç–µ 8 –±–æ–Ω—É—Å–æ–≤. "
            f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –±–æ–Ω—É—Å–æ–≤ —Å–µ–π—á–∞—Å: {bonus_count}.")
    else:
        code = generate_code()
        CHAT_DATA[code] = {'user_id': user_id, 'action': 'gift'}

        await update.message.reply_text(f"–í–∞—à –∫–æ–¥ –ø–æ–¥–∞—Ä–∫–∞: {code}")
        for item in ADMIN_ID:
            await context.bot.send_message(chat_id=item, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥ –ø–æ–¥–∞—Ä–∫–∞: {code}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def confirm_gift_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id not in ADMIN_ID:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∫–æ–¥—ã.")
        return

    try:
        code = int(update.message.text.split()[1])
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /confirmgift <code>")
        return

    if code in CHAT_DATA and CHAT_DATA[code]['action'] == 'gift':
        user_id = CHAT_DATA[code]['user_id']
        reset_user_bonus(user_id)

        gifts = [
            "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∞–∂ (30 –º–∏–Ω)",
            "–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π (30 –º–∏–Ω)",
            "–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ",
            "–§—Ä—É–∫—Ç–æ–≤–æ-—è–≥–æ–¥–Ω–æ–µ –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ",
            "–°–∫–∏–¥–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ 20%",
            "–°–∫–∏–¥–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ 30%",
            "–°–∫–∏–¥–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ 40%",
            "–°–∫–∏–¥–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ 50%",
        ]
        gift = random.choice(gifts)

        await context.bot.send_message(chat_id=user_id, text=f"üéÅüéÅüéÅ\n–£ –≤–∞—Å –Ω–∞–∫–æ–ø–∏–ª—Å—è 1 –ø–æ–¥–∞—Ä–æ–∫! –í–∞—à –ø–æ–¥–∞—Ä–æ–∫: {gift}")
        for admin_id in ADMIN_ID:
            await context.bot.send_message(chat_id=admin_id, text="–ö–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

        del context.chat_data[code]


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def admin_instructions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id not in ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    instructions = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "1. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ —É—Å–ª—É–≥–∏, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º.\n"
        "2. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ —É—Å–ª—É–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º: `/confirm <code>`, –∑–∞–º–µ–Ω—è—è <code> –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥.\n"
        "3. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –ø–æ–¥–∞—Ä–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º.\n"
        "4. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º: `/confirmgift <code>`, –∑–∞–º–µ–Ω—è—è <code> –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥."
    )
    await update.message.reply_text(instructions)


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


async def broadcast_fixed_message(context: ContextTypes.DEFAULT_TYPE) -> None:
    users = get_all_users()
    for user_id in users:
        try:
            await context.bot.send_message(chat_id=user_id, text=msg)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /broadcast
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat_id in ADMIN_ID:
        await broadcast_fixed_message(context)
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


def main() -> None:
    init_db()

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin_instructions))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("confirm", confirm_code))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("confirmgift", confirm_gift_code))
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    application.run_polling()


if __name__ == '__main__':
    main()
